DROP DATABASE UNIV_TRIAL_N_ERROR;

CREATE DATABASE UNIV_TRIAL_N_ERROR;

USE UNIV_TRIAL_N_ERROR;

-- password to allow the hod to view the dept data - data of students, courses, faculty and to update certain fields
CREATE TABLE U_DEPT(
    DEPT_ID VARCHAR(5) PRIMARY KEY,
    PASSWORD VARCHAR(20),
    DEPT_NAME VARCHAR(100) NOT NULL
);

CREATE TABLE U_PRGM(
    PRGM_ID FLOAT(2, 0) PRIMARY KEY,
    DEPT_ID VARCHAR(5),
    CONSTRAINT FK_DEPT_ID FOREIGN KEY(DEPT_ID) REFERENCES U_DEPT(DEPT_ID),
    PRGM_NAME VARCHAR(100)
);

-- a prgm cannot be continued when the dept is closed, so cascade delete
ALTER TABLE U_PRGM DROP CONSTRAINT FK_DEPT_ID;

ALTER TABLE U_PRGM ADD CONSTRAINT FK_DEPT_ID FOREIGN KEY(DEPT_ID) REFERENCES U_DEPT(DEPT_ID) ON DELETE CASCADE;

CREATE TABLE U_COURSE(
    COURSE_CODE VARCHAR(10) PRIMARY KEY,
    COURSE_NAME VARCHAR(200),
    COURSE_CATG VARCHAR(5),
 -- prereq varchar(10),
 -- constraint fk_prereq foreign key(prereq) references u_course(course_code),
    CREDITS FLOAT(3, 2),
    DEPT_ID VARCHAR(5),
    FOREIGN KEY(DEPT_ID) REFERENCES U_DEPT(DEPT_ID)
);

ALTER TABLE U_COURSE ADD COURSE_TYPE VARCHAR(20);

-- compulsory courses part of each programme
CREATE TABLE U_PRGM_COMP_COURSE(
    PRGM_ID FLOAT(2, 0),
    CONSTRAINT FK_PRGM_ID FOREIGN KEY(PRGM_ID) REFERENCES U_PRGM(PRGM_ID),
    COURSE_CODE VARCHAR(10),
    CONSTRAINT FK_COURSE_CODE FOREIGN KEY(COURSE_CODE) REFERENCES U_COURSE(COURSE_CODE),
    SEM INT
);

-- elective courses part of each programme

-- includes open elective for other dept students + prgm elective offered within the dept
CREATE TABLE U_PRGM_ELECTIVE_COURSE(
    PRGM_ID FLOAT(2, 0),
    CONSTRAINT FK_PRGM_ID2 FOREIGN KEY(PRGM_ID) REFERENCES U_PRGM(PRGM_ID),
    COURSE_CODE VARCHAR(10),
    CONSTRAINT FK_COURSE_CODE2 FOREIGN KEY(COURSE_CODE) REFERENCES U_COURSE(COURSE_CODE),
    SEM INT,
    ACADEMIC_YR_START FLOAT(4, 0),
    ACADEMIC_YR_END FLOAT(4, 0)
);

ALTER TABLE U_PRGM_ELECTIVE_COURSE ADD OFFERED VARCHAR(5), ADD BEING_RUN VARCHAR(5), ADD NO_OF_STUDENTS FLOAT;

CREATE TABLE U_FACULTY(
    FACULTY_ID VARCHAR(10) PRIMARY KEY,
    PASSWORD VARCHAR(10),
    FNAME VARCHAR(40),
    DEPT_ID VARCHAR(5),
    CONSTRAINT FK_DEPT_ID2 FOREIGN KEY(DEPT_ID) REFERENCES U_DEPT(DEPT_ID),
    DESIGNATION VARCHAR(50)
);

ALTER TABLE U_FACULTY ADD EMAIL VARCHAR(100);

CREATE TABLE U_STUDENT(
    REGNO VARCHAR(10) PRIMARY KEY,
    PASSWORD VARCHAR(10),
    SNAME VARCHAR(100),
    GENDER CHAR,
    DOB VARCHAR(15),
    YOJ FLOAT(4, 0),
    CREDITS_EARNED FLOAT(5, 2),
    PRGM_ID FLOAT(2, 0),
    CONSTRAINT FK_PRGM_ID3 FOREIGN KEY(PRGM_ID) REFERENCES U_PRGM(PRGM_ID)
 -- guide_id varchar(10),  -- for a PhD student
 -- constraint fk_guide_id foreign key(guide_id) references u_faculty(faculty_id)
);

ALTER TABLE U_STUDENT ADD CURR_SEM INT;

ALTER TABLE U_STUDENT ADD HISTORY_OF_ARREAR INT CHECK (HISTORY_OF_ARREAR IN (0, 1));

-- 0- no arrear, 1- yes(had an arrear)

-- current backlogs which haven't been cleared yet
ALTER TABLE U_STUDENT ADD BACKLOGS INT CHECK (BACKLOGS IN (0, 1));

ALTER TABLE U_STUDENT ADD EMAIL VARCHAR(100) UNIQUE;

ALTER TABLE U_STUDENT ADD ACTIVE FLOAT;

CREATE TABLE U_GPA_CGPA(
    REGNO VARCHAR(10),
    CONSTRAINT FK_REGNO2 FOREIGN KEY(REGNO) REFERENCES U_STUDENT(REGNO),
    SEM FLOAT,
    GPA FLOAT(4, 2),
    CGPA FLOAT(4, 2)
);

ALTER TABLE U_GPA_CGPA ADD NUM_OF_CREDITS_EARNED FLOAT(4, 1);

-- to store the float of credits earned in that semester alone


CREATE TABLE U_COURSE_REGN(
    REGNO VARCHAR(10),
    CONSTRAINT FK_REGNO FOREIGN KEY(REGNO) REFERENCES U_STUDENT(REGNO),
    COURSE_CODE VARCHAR(10),
    CONSTRAINT FK_COURSE_CODE3 FOREIGN KEY(COURSE_CODE) REFERENCES U_COURSE(COURSE_CODE),
    SEM FLOAT,
    INTERNAL_MARKS FLOAT(3, 1),
    CONSTRAINT CHECK_INT_MARKS CHECK(INTERNAL_MARKS <= 40),
    ATTENDANCE FLOAT(4, 1),
    CONSTRAINT CHECK_ATTENDANCE CHECK(ATTENDANCE <= 100),
    FACULTY_ID VARCHAR(10),
    CONSTRAINT FK_FACULTY_ID FOREIGN KEY(FACULTY_ID) REFERENCES U_FACULTY(FACULTY_ID),
    SESSION VARCHAR(5),
    PRIMARY KEY (REGNO, COURSE_CODE, SEM, SESSION)
);

-- create table course_offering(
--     course_code varchar(10),
--     constraint fk_course_code4 foreign key(course_code) references u_course(course_code),
--     dept_id varchar(5),
--     constraint fk_dept_id1 foreign key(dept_id) references u_dept(dept_id),
--     faculty_id varchar(10),
--     constraint fk_faculty_id1 foreign key(faculty_id) references u_faculty(faculty_id)
-- );


-- alter table course_offering
-- ADD primary key (course_code, dept_id, faculty_id);




CREATE TABLE U_EXTERNAL_MARKS(
    REGNO VARCHAR(10),
    CONSTRAINT FK_REGNO1 FOREIGN KEY(REGNO) REFERENCES U_STUDENT(REGNO),
    COURSE_CODE VARCHAR(10),
    CONSTRAINT FK_COURSE_CODE1 FOREIGN KEY(COURSE_CODE) REFERENCES U_COURSE(COURSE_CODE),
    EXTERNAL_MARKS FLOAT(3, 1),
    CONSTRAINT CHECK_EXT_MARKS CHECK(EXTERNAL_MARKS <= 60)
);

ALTER TABLE U_EXTERNAL_MARKS ADD GRADE CHAR;

ALTER TABLE U_EXTERNAL_MARKS ADD CONSTRAINT CHECK_GRADE CHECK (GRADE IN ('S', 'A', 'B', 'C', 'D', 'E', 'F', 'Z'));

ALTER TABLE U_EXTERNAL_MARKS ADD GRADEPT FLOAT;

ALTER TABLE U_EXTERNAL_MARKS ADD CONSTRAINT CHECK_GRADEPT CHECK(GRADEPT IN (10, 9, 8, 7, 6, 5, 0));

ALTER TABLE U_EXTERNAL_MARKS ADD ACTIVE INT;

ALTER TABLE U_EXTERNAL_MARKS ADD PRIMARY KEY(REGNO, COURSE_CODE, ACTIVE);

-- 1 - active; 0 - inactive



-- To be written
CREATE TABLE U_ADMINISTRATION(
 -- includes COE, Dean Academics, etc
    F_ID VARCHAR(10),
    CONSTRAINT FK_FID FOREIGN KEY(F_ID) REFERENCES U_FACULTY(FACULTY_ID),
    POSITION VARCHAR(30), -- eg. COE, Dean Academics
    USERNAME VARCHAR(20),
    PASSWORD VARCHAR(20)
);

-- a temporary purpose table used before allotting courses
CREATE TABLE U_HM_PREREGISTRATION(
    REGNO VARCHAR(10),
    CONSTRAINT FK_REGNO4 FOREIGN KEY(REGNO) REFERENCES U_STUDENT(REGNO),
    OPT1_PRGM_ID FLOAT,
    CONSTRAINT FK_PRGM_ID_HM1 FOREIGN KEY(OPT1_PRGM_ID) REFERENCES U_PRGM(PRGM_ID),
    OPT2_PRGM_ID FLOAT,
    CONSTRAINT FK_PRGM_ID_HM2 FOREIGN KEY(OPT2_PRGM_ID) REFERENCES U_PRGM(PRGM_ID),
    OPT3_PRGM_ID FLOAT,
    CONSTRAINT FK_PRGM_ID_HM3 FOREIGN KEY(OPT3_PRGM_ID) REFERENCES U_PRGM(PRGM_ID)
);

ALTER TABLE U_HM_PREREGISTRATION ADD CGPA FLOAT(4, 2);

CREATE TABLE ACADEMIC_CALENDAR(
    SEM INT PRIMARY KEY,
    SEM_BEGIN DATE,
    COURSE_REGN_BEGIN DATE,
    COURSE_REGN_CLOSE DATE, -- and 0th class committee meeting
    FIRST_TEST_BEGIN DATE,
    FIRST_TEST_END DATE,
    FIRST_TEST_EVAL DATE,
    SECOND_TEST_BEGIN DATE,
    SECOND_TEST_END DATE,
    SECOND_TEST_EVAL DATE,
    THIRD_TEST_BEGIN DATE,
    THIRD_TEST_END DATE,
    MODEL_PRAC_BEGIN DATE,
    MODEL_PRAC_END DATE,
    EXAM_REGN_BEGIN DATE,
    LAST_WORKING_DAY DATE, -- internal marks consolidation and publication
    SEM_PRAC_BEGIN DATE,
    SEM_PRAC_END DATE,
    SEM_THEORY_BEGIN DATE,
    SEM_THEORY_END DATE,
    VACATION_BEGIN DATE,
    VACATION_END DATE
);